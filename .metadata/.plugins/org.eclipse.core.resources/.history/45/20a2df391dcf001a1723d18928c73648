package com.java;
import com.java.Transaction;
import com.java.TransactionDate;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
public class Parameters 
{
static boolean invalid=false;
static boolean occurenceflag;
	// int count=0; 
		public static boolean TRID(Transaction t)
		{
			boolean flag=false;
			String n=t.getTransactionRef();
			
			if(n.length()==12 && n.matches("[a-zA-Z0-9]+"))
				flag=true; //true;
			else
				flag=false;
			return flag;
		}
	
		public static boolean PRNAME(Transaction t)
		{
		  boolean	flag =false;
			String n=t.getPayerName();
			
			if(n.length()<=35 && n.matches("[a-zA-Z0-9]+"))
				flag=true; //true;
			else
				flag=false;

			return flag;
		}
		
		
		public static boolean PRACC(Transaction t)
		{
			  boolean	flag =false;

			String n=t.getPayerAccount();
			
			if(n.length()==12 && n.matches("[a-zA-Z0-9]+"))
				flag=true; //true;
			else
				flag=false;

			return flag;
		}
		
		public static boolean PNAME(Transaction t)
		{
			String n=t.getPayeeName();
			boolean	flag =false;
			//String n="odsjodignie3";
			if(n.length()<=35 && n.matches("[a-zA-Z0-9]+"))
				flag=true; //true;
			else
				flag=false;
			return flag;
		}
		
		
		public static boolean PACC(Transaction t)
		{
			  boolean	flag =false;
			String n=t.getPayeeAccount();
			//String n="odsjodignie3";
			if(n.length()==12 && n.matches("[a-zA-Z0-9]+"))
				flag=true; //true;
			else
				flag=false;
			return flag;
		}
		
		public static boolean AMT(Transaction t)
		
		{
			String first,second;
			double n=t.getTransactionAmount();
			
			if(n<0.00)
				return false;
			if(n>9999999999.99)
				return false;
			return true;
		}	
		public static boolean date(Transaction t)
		{
			boolean f;
			TransactionDate date=t.getTransactionDate();
			f=checkDate(date);
			return f;
		}

		public  static boolean checkDate(TransactionDate transactionDate) {
			return checkDateFormat(transactionDate.getDay(), transactionDate.getMonth(), transactionDate.getYear())
					&& checkTransactionOccuranceDate(transactionDate.getDay(), transactionDate.getMonth(),
							transactionDate.getYear());

		}

		public static boolean checkDateFormat(int day, int month, int year)
		{

			if (year > 9999 || year < 1000)
				invalid= true;
			if (month > 12 || month < 1) {
				invalid = true;
			}
			if (checkDay(day, month, year) == false) {
				invalid = true;
			}
			if (invalid==false)
				occurenceflag=checkTransactionOccuranceDate(day, month, year);
			
			if(invalid==false && occurenceflag==true)
				return true;
			else
				return false;
			
		}

		public static boolean checkDay(int day, int month, int year) {
			if ((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)
					&& (day > 0 && day <= 31))
				return true;
			else if ((month == 4 || month == 6 || month == 9 || month == 11) && (day > 0 && day <= 30))
				return true;
			else if ((year % 4 != 0 && day > 0 && day <= 28) || (year % 4 == 0 && day > 0 && day <= 29))
				return true;
			return false;
		}

		public static boolean checkTransactionOccuranceDate(int day, int month, int year) {
			Date currentDate = new Date();
			int currentDay = currentDate.getDate();
			int currentMonth = currentDate.getMonth() + 1;
			int currentYear = currentDate.getYear() + 1900;
			// System.out.println("\nCurrent : " + currentDay + currentMonth + currentYear +
			// "\nTransaction Date : " + day
			// + month + year);

			if (day < currentDay || month < currentMonth || year < currentYear) {
				//dateBeforeFlag = true;// transactionDate before currentDate
				return false;
			} else if (day > currentDay || month > currentMonth || year > currentYear) {
				//dateAfterFlag = true;// transactionDate after currentDate
				return false;
			}
			return true;
		}
}

